// ==========================================================================
// Grid file
//
// The grid works as follows:
// .gd-<VIEWPORT>-<COLUMN SPAN>-<TOTAL COLUMNS>
//
// A typical example may look like this:
// .gd-sm-4-12
// It's easy to ready as "Grid small 4/12" or "Grid small four-twelfth"
// ==========================================================================

// Grid clearfix
// ==========================================================================
.gd-cf {
    &:before,
    &:after {
        content: " ";
        display: table;
    }

    &:after {
        clear: both;
    }

    *zoom: 1; // for IE 6/7
}

// Grid row
// ==========================================================================
.gd-row {
    @extend .gd-cf;
    margin-left: -$xs-h-gutter;
    margin-right: -$xs-h-gutter;

    @include bp(sm) {
        margin-left: -$sm-h-gutter;
        margin-right: -$sm-h-gutter;
    }

    @include bp(md) {
        margin-left: -$md-h-gutter;
        margin-right: -$md-h-gutter;
    }

    @include bp(lg) {
        margin-left: -$lg-h-gutter;
        margin-right: -$lg-h-gutter;
    }
}

// General grid cell styling
//
// Used and styled as primary "class", while the others are seen
// as modifiers
// ==========================================================================
@for $i from 1 through length($bps) {
    $bp-obj: nth($bps, $i);
    $name: nth($bp-obj, 1);

    .gd-#{$name}-col, // IE7 Fix
    [class*="gd-#{$name}-"] {
        @include box-sizing(border-box);
        float: left;

        // Vertical
        padding-left: gd-gutter($name, true);
        padding-right: gd-gutter($name, true);
        // Horizontal
        padding-top: gd-gutter($name, false);
        padding-bottom: gd-gutter($name, false);

        width: 100%;
    }
}

// Grid loop
//
// Build grid
// Run through the different breakpoint names
// Then run through the total columns
// Then run through each cell in the column
// ==========================================================================
@for $i from 1 through length($bps) {
    $bp-obj: nth($bps, $i);
    $name: nth($bp-obj, 1);

    @for $columns from 2 through $gd-column-total {

        // For each column in total columns
        @for $col from 1 through $columns {

            .gd-#{$name}-#{$col}-#{$columns} {
                // XS doesn't get a breakpoint
                @if $name == 'xs' {
                    width: gd-col-width($columns, $col);
                }
                @else {
                    @include bp($name) {
                        width: gd-col-width($columns, $col);
                        padding-left: gd-gutter($name, true);
                        padding-right: gd-gutter($name, true);

                        // If vertical gutter is enabled
                        padding-top: gd-gutter($name, false);
                        padding-bottom: gd-gutter($name, false);
                    }
                }
            }
        }

    } // @for
}

// Modifiers
.gd-row--no-gutter {
    margin: 0;

    // @Todo
    // This is a bit of a gross assumption.
    & > [class*="gd-"],
    & > [class*=" gd-"] {
        padding: 0;
    }

    // IE7 fix
    @for $i from 1 through length($bps) {
        $bp-obj: nth($bps, $i);
        $name: nth($bp-obj, 1);

        & > .gd-#{$name}-col {
            padding: 0;
        }
    }
}